<?php
/*
Plugin Name: Kovacic Pipeline Visualizer
Description: Kanban de procesos con relación Cliente→Proceso y candidatos vinculados. Subida de CV (admin y UI), edición en tarjeta, notas, exportación CSV/XLS en orden fijo, y estados/columnas configurables.
Version: 1.7.2
Author: Kovacic Executive Talent Research
*/

if (!defined('ABSPATH')) exit;

class Kovacic_Pipeline_Visualizer {
    const CPT           = 'kvt_candidate';
    const TAX_CLIENT    = 'kvt_client';
    const TAX_PROCESS   = 'kvt_process';
    const OPT_GROUP     = 'kvt_options';
    const OPT_STATUSES  = 'kvt_statuses';
    const OPT_COLUMNS   = 'kvt_columns';

    public function __construct() {
        add_action('init',                       [$this, 'register_types']);
        add_action('admin_init',                 [$this, 'register_settings']);
        add_action('admin_menu',                 [$this, 'admin_menu']);

        // Term meta: Proceso -> Cliente
        add_action(self::TAX_PROCESS . '_add_form_fields',  [$this, 'process_add_fields']);
        add_action(self::TAX_PROCESS . '_edit_form_fields', [$this, 'process_edit_fields']);
        add_action('created_' . self::TAX_PROCESS,          [$this, 'save_process_term'], 10, 2);
        add_action('edited_'  . self::TAX_PROCESS,          [$this, 'save_process_term'], 10, 2);

        // Candidate admin UI
        add_action('add_meta_boxes',             [$this, 'add_meta_boxes']);
        add_action('save_post_' . self::CPT,     [$this, 'save_candidate_meta']);

        // Replace default taxonomy boxes
        add_action('admin_menu',                 [$this, 'replace_tax_metaboxes']);

        // Frontend UI
        add_shortcode('kovacic_pipeline',        [$this, 'shortcode']);
        add_action('wp_enqueue_scripts',         [$this, 'enqueue_assets']);

        // AJAX
        add_action('wp_ajax_kvt_get_candidates',       [$this, 'ajax_get_candidates']);
        add_action('wp_ajax_nopriv_kvt_get_candidates',[$this, 'ajax_get_candidates']);
        add_action('wp_ajax_kvt_update_status',        [$this, 'ajax_update_status']);
        add_action('wp_ajax_nopriv_kvt_update_status', [$this, 'ajax_update_status']);
        add_action('wp_ajax_kvt_update_notes',         [$this, 'ajax_update_notes']);
        add_action('wp_ajax_nopriv_kvt_update_notes',  [$this, 'ajax_update_notes']);
        add_action('wp_ajax_kvt_delete_notes',         [$this, 'ajax_delete_notes']);
        add_action('wp_ajax_nopriv_kvt_delete_notes',  [$this, 'ajax_delete_notes']);
        add_action('wp_ajax_kvt_delete_candidate',     [$this, 'ajax_delete_candidate']);
        add_action('wp_ajax_nopriv_kvt_delete_candidate',[$this, 'ajax_delete_candidate']);
        add_action('wp_ajax_kvt_update_profile',       [$this, 'ajax_update_profile']);
        add_action('wp_ajax_nopriv_kvt_update_profile',[$this, 'ajax_update_profile']);
        add_action('wp_ajax_kvt_list_profiles',        [$this, 'ajax_list_profiles']);
        add_action('wp_ajax_nopriv_kvt_list_profiles', [$this, 'ajax_list_profiles']);
        add_action('wp_ajax_kvt_clone_profile',        [$this, 'ajax_clone_profile']);
        add_action('wp_ajax_nopriv_kvt_clone_profile', [$this, 'ajax_clone_profile']);
        add_action('wp_ajax_kvt_upload_cv',            [$this, 'ajax_upload_cv']); // subir CV desde UI
        add_action('wp_ajax_nopriv_kvt_upload_cv',     [$this, 'ajax_upload_cv']);
        add_action('wp_ajax_kvt_create_candidate',     [$this, 'ajax_create_candidate']);
        add_action('wp_ajax_nopriv_kvt_create_candidate',[$this, 'ajax_create_candidate']);
        add_action('wp_ajax_kvt_create_client',        [$this, 'ajax_create_client']);
        add_action('wp_ajax_nopriv_kvt_create_client', [$this, 'ajax_create_client']);
        add_action('wp_ajax_kvt_create_process',       [$this, 'ajax_create_process']);
        add_action('wp_ajax_nopriv_kvt_create_process',[$this, 'ajax_create_process']);
        add_action('wp_ajax_kvt_assign_candidate',     [$this, 'ajax_assign_candidate']);
        add_action('wp_ajax_nopriv_kvt_assign_candidate',[$this, 'ajax_assign_candidate']);
        add_action('wp_ajax_kvt_unassign_candidate',   [$this, 'ajax_unassign_candidate']);
        add_action('wp_ajax_nopriv_kvt_unassign_candidate',[$this, 'ajax_unassign_candidate']);

        // Export
        add_action('admin_post_kvt_export',          [$this, 'handle_export']);

        add_action('plugins_loaded',                 [$this, 'ensure_defaults']);
    }

    public function ensure_defaults() {
        if (get_option(self::OPT_STATUSES) === false) {
            update_option(self::OPT_STATUSES, "Identified\nContacted\nInterviewed\nOffer\nDeclined");
        }
        if (get_option(self::OPT_COLUMNS) === false) {
            update_option(self::OPT_COLUMNS,
"first_name|Nombre
last_name|Apellidos
email|Email
phone|Teléfono
country|País
city|Ciudad
cv_url|CV (URL)
cv_uploaded|Fecha de subida");
        }
    }

    /* Types & Taxonomies */
    public function register_types() {
        register_post_type(self::CPT, [
            'labels' => [
                'name' => 'Candidatos',
                'singular_name' => 'Candidato',
                'add_new_item' => 'Añadir candidato',
                'edit_item' => 'Editar candidato',
                'view_item' => 'Ver candidato',
                'search_items' => 'Buscar candidatos',
            ],
            'public' => false,
            'show_ui' => true,
            'supports' => ['title'],
            'menu_icon' => 'dashicons-groups',
        ]);

        register_taxonomy(self::TAX_CLIENT, [self::CPT], [
            'labels' => ['name' => 'Clientes','singular_name' => 'Cliente'],
            'public' => false,'show_ui' => true,'hierarchical' => false,
            'meta_box_cb' => null,
        ]);

        register_taxonomy(self::TAX_PROCESS, [self::CPT], [
            'labels' => ['name' => 'Procesos','singular_name' => 'Proceso'],
            'public' => false,'show_ui' => true,'hierarchical' => false,
            'meta_box_cb' => null,
        ]);
    }

    /* Settings page */
    public function register_settings() {
        register_setting(self::OPT_GROUP, self::OPT_STATUSES);
        register_setting(self::OPT_GROUP, self::OPT_COLUMNS);
    }
    public function admin_menu() {
        add_options_page('Kovacic Pipeline','Kovacic Pipeline','manage_options','kvt-settings',[$this,'settings_page']);
    }
    public function settings_page() {
        $statuses = get_option(self::OPT_STATUSES, "");
        $columns  = get_option(self::OPT_COLUMNS, "");
        ?>
        <div class="wrap">
            <h1>Kovacic Pipeline — Ajustes</h1>
            <form method="post" action="options.php">
                <?php settings_fields(self::OPT_GROUP); ?>
                <table class="form-table" role="presentation">
                    <tr>
                        <th scope="row"><label for="<?php echo self::OPT_STATUSES; ?>">Estados del pipeline</label></th>
                        <td>
                            <textarea name="<?php echo self::OPT_STATUSES; ?>" id="<?php echo self::OPT_STATUSES; ?>" rows="8" class="large-text" placeholder="Un estado por línea, de izquierda a derecha en el tablero"><?php echo esc_textarea($statuses); ?></textarea>
                            <p class="description">Ejemplo (uno por línea): Identified, Contacted, Interviewed, Offer, Declined</p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row"><label for="<?php echo self::OPT_COLUMNS; ?>">Columnas de datos (tabla/exportación)</label></th>
                        <td>
                            <textarea name="<?php echo self::OPT_COLUMNS; ?>" id="<?php echo self::OPT_COLUMNS; ?>" rows="10" class="large-text" placeholder="meta_key|Etiqueta visible"><?php echo esc_textarea($columns); ?></textarea>
                            <p class="description">
                                Formato: <code>meta_key|Etiqueta</code> (una por línea). Por defecto: <code>first_name, last_name, email, phone, country, city, cv_url, cv_uploaded</code>
                            </p>
                        </td>
                    </tr>
                </table>
                <?php submit_button('Guardar ajustes'); ?>
            </form>
        </div>
        <?php
    }

    /* Proceso -> Cliente term meta */
    public function process_add_fields($taxonomy) {
        $clients = get_terms(['taxonomy'=>self::TAX_CLIENT,'hide_empty'=>false]); ?>
        <div class="form-field">
            <label for="kvt_process_client">Cliente asociado</label>
            <select name="kvt_process_client" id="kvt_process_client">
                <option value="">— Ninguno —</option>
                <?php foreach ($clients as $c): ?>
                    <option value="<?php echo esc_attr($c->term_id); ?>"><?php echo esc_html($c->name); ?></option>
                <?php endforeach; ?>
            </select>
            <p class="description">(Opcional) Vincula este proceso a un cliente.</p>
        </div>
        <?php
    }
    public function process_edit_fields($term) {
        $clients = get_terms(['taxonomy'=>self::TAX_CLIENT,'hide_empty'=>false]);
        $current = get_term_meta($term->term_id, 'kvt_process_client', true);
        ?>
        <tr class="form-field">
            <th scope="row"><label for="kvt_process_client">Cliente asociado</label></th>
            <td>
                <select name="kvt_process_client" id="kvt_process_client">
                    <option value="">— Ninguno —</option>
                    <?php foreach ($clients as $c): ?>
                        <option value="<?php echo esc_attr($c->term_id); ?>" <?php selected($current, $c->term_id); ?>>
                            <?php echo esc_html($c->name); ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </td>
        </tr>
        <?php
    }
    public function save_process_term($term_id, $tt_id) {
        if (isset($_POST['kvt_process_client'])) {
            $client_id = intval($_POST['kvt_process_client']);
            if ($client_id > 0) {
                update_term_meta($term_id, 'kvt_process_client', $client_id);
            } else {
                delete_term_meta($term_id, 'kvt_process_client');
            }
        }
    }

    /* Candidate admin */
    public function replace_tax_metaboxes() {
        remove_meta_box(self::TAX_CLIENT.'div', self::CPT, 'side');
        remove_meta_box(self::TAX_PROCESS.'div', self::CPT, 'side');
        add_meta_box('kvt_client_box',  'Cliente',  [$this,'render_client_dropdown'],  self::CPT, 'side', 'default');
        add_meta_box('kvt_process_box', 'Proceso',  [$this,'render_process_dropdown'], self::CPT, 'side', 'default');
    }
    public function render_client_dropdown($post) {
        wp_nonce_field('kvt_save_candidate', 'kvt_nonce');
        $terms = get_terms(['taxonomy'=>self::TAX_CLIENT,'hide_empty'=>false]);
        $assigned = wp_get_object_terms($post->ID, self::TAX_CLIENT, ['fields'=>'ids']);
        $current  = isset($assigned[0]) ? (int)$assigned[0] : 0;
        echo '<select name="kvt_client_term" id="kvt_client_term" class="widefat">';
        echo '<option value="">— Ninguno —</option>';
        foreach ($terms as $t) {
            echo '<option value="'.esc_attr($t->term_id).'" '.selected($current,$t->term_id,false).'>'.esc_html($t->name).'</option>';
        }
        echo '</select>';
    }
    public function render_process_dropdown($post) {
        $terms = get_terms(['taxonomy'=>self::TAX_PROCESS,'hide_empty'=>false]);
        $assigned = wp_get_object_terms($post->ID, self::TAX_PROCESS, ['fields'=>'ids']);
        $current  = isset($assigned[0]) ? (int)$assigned[0] : 0;
        echo '<select name="kvt_process_term" id="kvt_process_term" class="widefat">';
        echo '<option value="">— Ninguno —</option>';
        foreach ($terms as $t) {
            echo '<option value="'.esc_attr($t->term_id).'" '.selected($current,$t->term_id,false).'>'.esc_html($t->name).'</option>';
        }
        echo '</select><p class="description">Si eliges Proceso, se asignará automáticamente su Cliente.</p>';
    }

    private function meta_get_compat($post_id, $key, $fallbacks = []) {
        $v = get_post_meta($post_id, $key, true);
        if ($v !== '' && $v !== null) return $v;
        foreach ($fallbacks as $fb) {
            $vv = get_post_meta($post_id, $fb, true);
            if ($vv !== '' && $vv !== null) return $vv;
        }
        return '';
    }
    private function fmt_date_ddmmyyyy($val){
        $val = trim((string)$val);
        if ($val === '') return '';
        if (preg_match('/^\d{4}-\d{2}-\d{2}/', $val)) {
            $ts = strtotime(substr($val,0,10));
            return $ts ? date('d-m-Y',$ts) : $val;
        }
        if (preg_match('/^\d{2}-\d{2}-\d{4}$/', $val)) return $val;
        $ts = strtotime($val);
        return $ts ? date('d-m-Y',$ts) : $val;
    }

    public function add_meta_boxes() {
        add_meta_box('kvt_candidate_details', 'Datos del candidato', [$this, 'metabox_candidate'], self::CPT, 'normal', 'high');
        add_meta_box('kvt_candidate_status',  'Estado del pipeline',  [$this, 'metabox_status'],    self::CPT, 'side',   'high');
    }
    public function metabox_candidate($post) {
        wp_nonce_field('kvt_save_candidate', 'kvt_nonce');
        $first   = $this->meta_get_compat($post->ID, 'kvt_first_name',  ['first_name']);
        $last    = $this->meta_get_compat($post->ID, 'kvt_last_name',   ['last_name']);
        $email   = $this->meta_get_compat($post->ID, 'kvt_email',       ['email']);
        $phone   = $this->meta_get_compat($post->ID, 'kvt_phone',       ['phone']);
        $country = $this->meta_get_compat($post->ID, 'kvt_country',     ['country']);
        $city    = $this->meta_get_compat($post->ID, 'kvt_city',        ['city']);
        $cv_url  = $this->meta_get_compat($post->ID, 'kvt_cv_url',      ['cv_url']);
        $cv_date_raw = $this->meta_get_compat($post->ID, 'kvt_cv_uploaded', ['cv_uploaded']);
        $cv_date = $this->fmt_date_ddmmyyyy($cv_date_raw);
        $cv_att  = $this->meta_get_compat($post->ID, 'kvt_cv_attachment_id', ['cv_attachment_id']);
        $notes   = $this->meta_get_compat($post->ID, 'kvt_notes',       ['notes']);
        ?>
        <table class="form-table">
            <tr><th><label>Nombre</label></th><td><input type="text" name="kvt_first_name" value="<?php echo esc_attr($first); ?>" class="regular-text"></td></tr>
            <tr><th><label>Apellidos</label></th><td><input type="text" name="kvt_last_name" value="<?php echo esc_attr($last); ?>" class="regular-text"></td></tr>
            <tr><th><label>Email</label></th><td><input type="email" name="kvt_email" value="<?php echo esc_attr($email); ?>" class="regular-text"></td></tr>
            <tr><th><label>Teléfono</label></th><td><input type="text" name="kvt_phone" value="<?php echo esc_attr($phone); ?>" class="regular-text"></td></tr>
            <tr><th><label>País</label></th><td><input type="text" name="kvt_country" value="<?php echo esc_attr($country); ?>" class="regular-text"></td></tr>
            <tr><th><label>Ciudad</label></th><td><input type="text" name="kvt_city" value="<?php echo esc_attr($city); ?>" class="regular-text"></td></tr>

            <tr><th><label>CV (URL)</label></th>
                <td>
                    <input type="url" name="kvt_cv_url" value="<?php echo esc_attr($cv_url); ?>" class="regular-text" placeholder="https://...">
                    <?php if ($cv_url): ?><p style="margin:.4em 0 0;"><a href="<?php echo esc_url($cv_url); ?>" target="_blank" rel="noopener">Abrir CV actual</a></p><?php endif; ?>
                    <?php if ($cv_att): ?><p style="margin:.2em 0 0;color:#555;">Adjunto (ID: <?php echo intval($cv_att); ?>)</p><?php endif; ?>
                </td>
            </tr>
            <tr><th><label>Subir CV (PDF/DOC/DOCX)</label></th>
                <td>
                    <input type="file" name="kvt_cv_file" accept=".pdf,.doc,.docx,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document">
                    <?php if ($cv_url || $cv_att): ?>
                        <p style="margin:.4em 0 0;"><label><input type="checkbox" name="kvt_cv_remove" value="1"> Eliminar CV actual</label></p>
                    <?php endif; ?>
                    <p class="description">Al subir un CV, guardamos el enlace en “CV (URL)” y la fecha (DD-MM-YYYY) si está vacía.</p>
                </td>
            </tr>

            <tr><th><label>Fecha de subida</label></th><td><input type="text" name="kvt_cv_uploaded" value="<?php echo esc_attr($cv_date); ?>" class="regular-text" placeholder="DD-MM-YYYY"></td></tr>

            <tr><th><label>Notas</label></th>
                <td><textarea name="kvt_notes" rows="6" class="large-text" placeholder="Notas internas"><?php echo esc_textarea($notes); ?></textarea></td>
            </tr>
        </table>
        <p class="description">Asigna un <strong>Proceso</strong> en la caja lateral. Se autovinculará el <strong>Cliente</strong> relacionado.</p>
        <?php
    }
    public function metabox_status($post) {
        $status = get_post_meta($post->ID, 'kvt_status', true);
        $statuses = $this->get_statuses(); ?>
        <p><label for="kvt_status">Estado actual</label></p>
        <select name="kvt_status" id="kvt_status" class="widefat">
            <?php foreach ($statuses as $st): ?>
                <option value="<?php echo esc_attr($st); ?>" <?php selected($status, $st); ?>><?php echo esc_html($st); ?></option>
            <?php endforeach; ?>
        </select>
        <?php
    }

    public function save_candidate_meta($post_id) {
        if (!isset($_POST['kvt_nonce']) || !wp_verify_nonce($_POST['kvt_nonce'], 'kvt_save_candidate')) return;
        if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) return;
        if (!current_user_can('edit_post', $post_id)) return;

        $uploaded_url = '';
        $uploaded_dt  = '';

        // Remove CV
        if (!empty($_POST['kvt_cv_remove'])) {
            $att_id = (int) get_post_meta($post_id, 'kvt_cv_attachment_id', true);
            if ($att_id) wp_delete_attachment($att_id, true);
            delete_post_meta($post_id, 'kvt_cv_attachment_id');
            delete_post_meta($post_id, 'kvt_cv_url');
            delete_post_meta($post_id, 'cv_url');
        }

        // Upload new CV
        if (!empty($_FILES['kvt_cv_file']['name'])) {
            if (!function_exists('media_handle_upload')) {
                require_once ABSPATH . 'wp-admin/includes/image.php';
                require_once ABSPATH . 'wp-admin/includes/file.php';
                require_once ABSPATH . 'wp-admin/includes/media.php';
            }
            add_filter('upload_mimes', function($mimes){
                $mimes['pdf']  = 'application/pdf';
                $mimes['doc']  = 'application/msword';
                $mimes['docx'] = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
                return $mimes;
            });
            $attach_id = media_handle_upload('kvt_cv_file', $post_id);
            if (!is_wp_error($attach_id)) {
                $uploaded_url = wp_get_attachment_url($attach_id);
                update_post_meta($post_id, 'kvt_cv_attachment_id', $attach_id);
                if ($uploaded_url) {
                    update_post_meta($post_id, 'kvt_cv_url', esc_url_raw($uploaded_url));
                    update_post_meta($post_id, 'cv_url', esc_url_raw($uploaded_url)); // legacy
                }
                $today = date_i18n('d-m-Y');
                update_post_meta($post_id, 'kvt_cv_uploaded', $today);
                update_post_meta($post_id, 'cv_uploaded', $today);
                $uploaded_dt = $today;
            } else {
                error_log('[KVT] Error subiendo CV: ' . $attach_id->get_error_message());
            }
        }

        // Save fields
        $fields = [
            'kvt_first_name' => ['first_name'],
            'kvt_last_name'  => ['last_name'],
            'kvt_email'      => ['email'],
            'kvt_phone'      => ['phone'],
            'kvt_country'    => ['country'],
            'kvt_city'       => ['city'],
            'kvt_cv_url'     => ['cv_url'],
            'kvt_cv_uploaded'=> ['cv_uploaded'],
            'kvt_status'     => [],
            'kvt_notes'      => ['notes'],
        ];
        foreach ($fields as $k => $fallbacks) {
            if ($k === 'kvt_cv_url' && $uploaded_url) continue;
            if ($k === 'kvt_cv_uploaded' && $uploaded_dt) continue;
            if (isset($_POST[$k])) {
                $val = ($k==='kvt_notes') ? wp_kses_post($_POST[$k])
                      : (($k==='kvt_email') ? sanitize_email($_POST[$k]) : sanitize_text_field($_POST[$k]));
                if ($k === 'kvt_cv_uploaded') $val = $this->fmt_date_ddmmyyyy($val);
                update_post_meta($post_id, $k, $val);
                foreach ($fallbacks as $fb) update_post_meta($post_id, $fb, $val);
            }
        }

        // Terms
        $client_term  = isset($_POST['kvt_client_term'])  ? intval($_POST['kvt_client_term'])  : 0;
        $process_term = isset($_POST['kvt_process_term']) ? intval($_POST['kvt_process_term']) : 0;

        if ($process_term > 0) {
            wp_set_object_terms($post_id, [$process_term], self::TAX_PROCESS, false);
            $linked_client = (int) get_term_meta($process_term, 'kvt_process_client', true);
            if ($linked_client > 0) {
                wp_set_object_terms($post_id, [$linked_client], self::TAX_CLIENT, false);
            } elseif ($client_term > 0) {
                wp_set_object_terms($post_id, [$client_term], self::TAX_CLIENT, false);
            }
        } else {
            if ($client_term > 0) {
                wp_set_object_terms($post_id, [$client_term], self::TAX_CLIENT, false);
            } else {
                wp_set_object_terms($post_id, [], self::TAX_CLIENT, false);
                wp_set_object_terms($post_id, [], self::TAX_PROCESS, false);
            }
        }

        // Title fallback
        $title = get_the_title($post_id);
        if (!$title) {
            $fn = get_post_meta($post_id, 'kvt_first_name', true);
            $ln = get_post_meta($post_id, 'kvt_last_name', true);
            $new = trim($fn . ' ' . $ln);
            if ($new) wp_update_post(['ID'=>$post_id,'post_title'=>$new]);
        }
    }

    /* Helpers */
    private function get_statuses() {
        $raw = get_option(self::OPT_STATUSES, "");
        $lines = preg_split('/\r\n|\r|\n/', (string)$raw);
        $out = [];
        foreach ($lines as $l) { $l = trim($l); if ($l !== '') $out[] = $l; }
        if (empty($out)) $out = ['Identified','Contacted','Interviewed','Offer','Declined'];
        return $out;
    }
    private function get_columns() {
        $raw = get_option(self::OPT_COLUMNS, "");
        $lines = preg_split('/\r\n|\r|\n/', (string)$raw);
        $cols = [];
        foreach ($lines as $l) {
            $l = trim($l); if ($l === '') continue;
            $parts = explode('|', $l, 2);
            $key = trim($parts[0]);
            $label = isset($parts[1]) ? trim($parts[1]) : $key;
            $cols[] = ['key'=>$key,'label'=>$label];
        }
        if (empty($cols)) {
            $cols = [
                ['key'=>'first_name','label'=>'Nombre'],
                ['key'=>'last_name','label'=>'Apellidos'],
                ['key'=>'email','label'=>'Email'],
                ['key'=>'phone','label'=>'Teléfono'],
                ['key'=>'country','label'=>'País'],
                ['key'=>'city','label'=>'Ciudad'],
                ['key'=>'cv_url','label'=>'CV (URL)'],
                ['key'=>'cv_uploaded','label'=>'Fecha de subida'],
            ];
        }
        return $cols;
    }
    private function get_process_map() {
        $terms = get_terms(['taxonomy'=>self::TAX_PROCESS,'hide_empty'=>false]);
        $out = [];
        foreach ($terms as $t) {
            $cid = (int) get_term_meta($t->term_id, 'kvt_process_client', true);
            $out[] = ['id'=>$t->term_id, 'name'=>$t->name, 'client_id'=>$cid ?: 0];
        }
        return $out;
    }
    private function get_term_name($post_id, $tax){
        $terms = wp_get_object_terms($post_id, $tax);
        if (is_wp_error($terms) || empty($terms)) return '';
        return $terms[0]->name;
    }
    private function count_notes($notes) {
        $notes = (string) $notes;
        if ($notes === '') return 0;
        $lines = preg_split('/\r\n|\r|\n/', $notes);
        $cnt = 0;
        foreach ($lines as $ln) if (trim($ln) !== '') $cnt++;
        return $cnt;
    }

    /* Shortcode */
    public function shortcode($atts = []) {
        if (!is_user_logged_in() || !current_user_can('edit_posts')) {
            return '<div class="kvt-wrapper"><p>Debes iniciar sesión para ver el pipeline.</p></div>';
        }
        $clients   = get_terms(['taxonomy'=>self::TAX_CLIENT, 'hide_empty'=>false]);
        $processes = get_terms(['taxonomy'=>self::TAX_PROCESS,'hide_empty'=>false]);
        $proc_map  = $this->get_process_map();
        $client_map = array_map(function($t){
            return [
                'id'            => $t->term_id,
                'name'          => $t->name,
                'contact_name'  => get_term_meta($t->term_id, 'contact_name', true),
                'contact_email' => get_term_meta($t->term_id, 'contact_email', true),
                'contact_phone' => get_term_meta($t->term_id, 'contact_phone', true),
            ];
        }, $clients);

        ob_start(); ?>
        <div class="kvt-wrapper">
            <div class="kvt-toolbar">
                <div class="kvt-filters">
                    <label>Cliente
                        <select id="kvt_client">
                            <option value="">— Todos —</option>
                            <?php foreach ($clients as $t): ?>
                                <option value="<?php echo esc_attr($t->term_id); ?>"><?php echo esc_html($t->name); ?></option>
                            <?php endforeach; ?>
                        </select>
                    </label>
                    <label>Proceso
                        <select id="kvt_process">
                            <option value="">— Todos —</option>
                            <?php foreach ($processes as $t): ?>
                                <option value="<?php echo esc_attr($t->term_id); ?>"><?php echo esc_html($t->name); ?></option>
                            <?php endforeach; ?>
                        </select>
                    </label>
                    <label>Búsqueda
                        <input type="text" id="kvt_search" placeholder="Nombre, email, ciudad…">
                    </label>
                    <button class="kvt-btn" id="kvt_refresh">Actualizar</button>
                </div>
                <div class="kvt-actions">
                    <button class="kvt-btn" id="kvt_add_profile">Añadir perfil</button>
                    <div class="kvt-new" id="kvt_new_container">
                      <button type="button" class="kvt-btn" id="kvt_new_btn">Nuevo</button>
                      <div class="kvt-new-menu" id="kvt_new_menu">
                        <button type="button" data-action="candidate">Nuevo candidato</button>
                        <button type="button" data-action="client">Nuevo cliente</button>
                        <button type="button" data-action="process">Nuevo proceso</button>
                      </div>
                    </div>
                    <button class="kvt-btn kvt-secondary" id="kvt_toggle_table">Tabla</button>
                    <form id="kvt_export_form" method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>" target="_blank" style="display:inline;">
                        <input type="hidden" name="action" value="kvt_export">
                        <input type="hidden" name="kvt_export_nonce" value="<?php echo esc_attr(wp_create_nonce('kvt_export')); ?>">
                        <input type="hidden" name="filter_client"  id="kvt_export_client"  value="">
                        <input type="hidden" name="filter_process" id="kvt_export_process" value="">
                        <input type="hidden" name="filter_search"  id="kvt_export_search"  value="">
                        <input type="hidden" name="format"         id="kvt_export_format"   value="csv">
                        <button class="kvt-btn" type="button" id="kvt_export_csv">Export CSV</button>
                        <button class="kvt-btn" type="button" id="kvt_export_xls">Export Excel</button>
                    </form>
                </div>
            </div>

            <div id="kvt_selected_info" data-client-base="<?php echo esc_url(admin_url('term.php?taxonomy=' . self::TAX_CLIENT . '&tag_ID=')); ?>" data-process-base="<?php echo esc_url(admin_url('term.php?taxonomy=' . self::TAX_PROCESS . '&tag_ID=')); ?>" style="display:none;">
              <span id="kvt_selected_summary"></span>
              <button type="button" class="kvt-btn kvt-secondary" id="kvt_selected_toggle">Detalles</button>
              <div id="kvt_selected_details" style="display:none;">
                <p id="kvt_selected_client"></p>
                <p id="kvt_selected_process"></p>
              </div>
            </div>

            <div id="kvt_board" class="kvt-board" aria-live="polite"></div>

            <div id="kvt_table_wrap" class="kvt-table-wrap" style="display:none;">
                <table id="kvt_table">
                    <thead><tr id="kvt_table_head"></tr></thead>
                    <tbody id="kvt_table_body"></tbody>
                </table>
            </div>
        </div>

        <!-- Modal Añadir Perfil -->
        <div class="kvt-modal" id="kvt_modal" style="display:none;">
          <div class="kvt-modal-content" role="dialog" aria-modal="true" aria-labelledby="kvt_modal_title">
            <div class="kvt-modal-header">
              <h3 id="kvt_modal_title">Añadir perfil</h3>
              <button type="button" class="kvt-modal-close dashicons dashicons-no-alt" title="Cerrar"></button>
            </div>
            <div class="kvt-modal-body">
              <div class="kvt-modal-controls">
                <label>Cliente
                  <select id="kvt_modal_client">
                    <option value="">— Ninguno —</option>
                    <?php foreach ($clients as $c): ?>
                      <option value="<?php echo esc_attr($c->term_id); ?>"><?php echo esc_html($c->name); ?></option>
                    <?php endforeach; ?>
                  </select>
                </label>
                <label>Proceso
                  <select id="kvt_modal_process">
                    <option value="">— Ninguno —</option>
                    <?php foreach ($processes as $t): ?>
                      <option value="<?php echo esc_attr($t->term_id); ?>"><?php echo esc_html($t->name); ?></option>
                    <?php endforeach; ?>
                  </select>
                </label>
                <label>Buscar
                  <input type="text" id="kvt_modal_search" placeholder="Nombre o email…">
                </label>
                <button type="button" class="kvt-btn" id="kvt_modal_create_empty">Crear vacío</button>
                <form id="kvt_export_all_form" method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>" target="_blank">
                  <input type="hidden" name="action" value="kvt_export">
                  <input type="hidden" name="kvt_export_nonce" value="<?php echo esc_attr(wp_create_nonce('kvt_export')); ?>">
                  <input type="hidden" name="filter_client" value="">
                  <input type="hidden" name="filter_process" value="">
                  <input type="hidden" name="filter_search" value="">
                  <input type="hidden" name="format" id="kvt_export_all_format" value="csv">
                  <button type="button" class="kvt-btn" id="kvt_export_all_csv">Export CSV</button>
                  <button type="button" class="kvt-btn" id="kvt_export_all_xls">Export Excel</button>
                </form>
              </div>
              <div id="kvt_modal_list" class="kvt-modal-list"></div>
              <div class="kvt-modal-pager">
                <button type="button" class="kvt-btn kvt-secondary" id="kvt_modal_prev">Anterior</button>
                <span id="kvt_modal_pageinfo"></span>
                <button type="button" class="kvt-btn kvt-secondary" id="kvt_modal_next">Siguiente</button>
              </div>
            </div>
          </div>
        
        <!-- Create Candidate Modal -->
        <div class="kvt-modal" id="kvt_create_modal" style="display:none">
          <div class="kvt-modal-content">
            <div class="kvt-modal-header">
              <h3>Crear candidato</h3>
              <button type="button" class="kvt-modal-close" id="kvt_create_close" aria-label="Cerrar"><span class="dashicons dashicons-no-alt"></span></button>
            </div>
            <div class="kvt-modal-body">
              <div class="kvt-modal-controls">
                <input type="text" id="kvt_new_first" placeholder="Nombre">
                <input type="text" id="kvt_new_last" placeholder="Apellidos">
                <input type="email" id="kvt_new_email" placeholder="Email">
                <select id="kvt_new_client">
                  <option value="">— Cliente —</option>
                  <?php foreach ($clients as $t): ?>
                    <option value="<?php echo esc_attr($t->term_id); ?>"><?php echo esc_html($t->name); ?></option>
                  <?php endforeach; ?>
                </select>
                <select id="kvt_new_process">
                  <option value="">— Proceso —</option>
                  <?php foreach ($processes as $t): ?>
                    <option value="<?php echo esc_attr($t->term_id); ?>"><?php echo esc_html($t->name); ?></option>
                  <?php endforeach; ?>
                </select>
                <button type="button" class="kvt-btn" id="kvt_new_submit">Crear</button>
              </div>
            </div>
          </div>
        </div>
        <!-- Create Client Modal -->
        <div class="kvt-modal" id="kvt_new_client_modal" style="display:none">
          <div class="kvt-modal-content">
            <div class="kvt-modal-header">
              <h3>Crear cliente</h3>
              <button type="button" class="kvt-modal-close" id="kvt_new_client_close" aria-label="Cerrar"><span class="dashicons dashicons-no-alt"></span></button>
            </div>
            <div class="kvt-modal-body">
              <div class="kvt-modal-controls">
                <input type="text" id="kvt_client_name" placeholder="Empresa">
                <input type="text" id="kvt_client_contact" placeholder="Persona de contacto">
                <input type="email" id="kvt_client_email" placeholder="Email">
                <input type="text" id="kvt_client_phone" placeholder="Teléfono">
                <button type="button" class="kvt-btn" id="kvt_client_submit">Crear</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Create Process Modal -->
        <div class="kvt-modal" id="kvt_new_process_modal" style="display:none">
          <div class="kvt-modal-content">
            <div class="kvt-modal-header">
              <h3>Crear proceso</h3>
              <button type="button" class="kvt-modal-close" id="kvt_new_process_close" aria-label="Cerrar"><span class="dashicons dashicons-no-alt"></span></button>
            </div>
            <div class="kvt-modal-body">
              <div class="kvt-modal-controls">
                <input type="text" id="kvt_process_name_new" placeholder="Nombre del proceso">
                <select id="kvt_process_client_new">
                  <option value="">— Cliente —</option>
                  <?php foreach ($clients as $t): ?>
                    <option value="<?php echo esc_attr($t->term_id); ?>"><?php echo esc_html($t->name); ?></option>
                  <?php endforeach; ?>
                </select>
                <button type="button" class="kvt-btn" id="kvt_process_submit">Crear</button>
              </div>
            </div>
          </div>
        </div>
</div>
        <?php
        // Make maps available to JS BEFORE app script executes
        wp_add_inline_script('kvt-app', 'window.KVT_CLIENT_MAP=' . wp_json_encode($client_map) . ';', 'before');
        wp_add_inline_script('kvt-app', 'window.KVT_PROCESS_MAP=' . wp_json_encode($proc_map) . ';', 'before');
        return ob_get_clean();
    }

    /* Assets */
    public function enqueue_assets() {
        // Styles
        wp_enqueue_style('dashicons');
        $css = "
        .kvt-wrapper{max-width:1200px;margin:0 auto;padding:16px;background:#fff;border-radius:12px;box-shadow:0 10px 30px rgba(0,0,0,.06)}
        .kvt-toolbar{display:flex;justify-content:space-between;gap:12px;flex-wrap:wrap;margin-bottom:12px}
        .kvt-filters label{margin-right:12px;display:inline-flex;gap:6px;align-items:center;font-weight:600}
        .kvt-filters input,.kvt-filters select{padding:8px 10px;border:1px solid #e5e7eb;border-radius:8px}
        .kvt-btn{background:#0A212E;color:#fff;border:none;border-radius:10px;padding:10px 14px;cursor:pointer;font-weight:600}
        .kvt-btn:hover{opacity:.95}
          .kvt-secondary{background:#475569}
          .kvt-new{position:relative;display:inline-block}
          .kvt-new-menu{position:absolute;right:0;top:100%;background:#fff;border:1px solid #e5e7eb;border-radius:8px;box-shadow:0 5px 15px rgba(0,0,0,.1);display:none;flex-direction:column;z-index:1000}
          .kvt-new-menu button{background:none;color:#0A212E;border:none;padding:8px 12px;text-align:left;cursor:pointer}
          .kvt-new-menu button:hover{background:#f1f5f9}
          .kvt-board{display:flex;gap:12px;overflow-x:auto;padding-bottom:6px}
        .kvt-col{min-width:260px;background:#f8fafc;border:1px solid #e5e7eb;border-radius:12px;padding:10px;flex:0 0 260px}
        .kvt-col h3{margin:0 0 8px;font-size:16px;color:#0A212E}
        .kvt-col.dragover{outline:2px dashed #0A212E; outline-offset: -6px;}
        .kvt-dropzone{min-height:60px;display:flex;flex-direction:column;gap:8px}
        .kvt-card{background:#fff;border:1px solid #e5e7eb;border-radius:12px;padding:10px;box-shadow:0 3px 10px rgba(0,0,0,.04);cursor:grab;overflow-wrap:anywhere;word-break:break-word}
        .kvt-card.dragging{opacity:.6}
        .kvt-card .kvt-title{font-weight:700;margin:0 0 4px}
        .kvt-card .kvt-sub{font-size:12px;color:#64748b;margin:0}
        .kvt-card .kvt-meta{display:none}
        .kvt-card .kvt-expand{margin-top:8px;display:flex;gap:8px;flex-wrap:wrap}
        .kvt-card .kvt-expand button{background:#eef2f7;color:#0A212E;border:1px solid #e5e7eb;border-radius:8px;padding:6px 10px;cursor:pointer;font-weight:600}
        .kvt-card .kvt-panel{display:none;margin-top:8px;border-top:1px dashed #e2e8f0;padding-top:8px}
        .kvt-card .kvt-panel dl{display:grid;grid-template-columns:140px 1fr;gap:6px 10px;font-size:13px}
        .kvt-card .kvt-panel dt{font-weight:700;color:#0A212E}
          .kvt-card .kvt-panel dd{margin:0}
          .kvt-card-head{display:flex;justify-content:space-between;align-items:center}
          .kvt-cv-link{font-size:18px;color:#0A212E;text-decoration:none}
          .kvt-cv-link:hover{color:#334155}
          .kvt-input{width:100%;padding:8px;border:1px solid #e5e7eb;border-radius:8px}
        .kvt-card .kvt-notes{margin-top:8px}
        .kvt-card .kvt-notes textarea{width:100%;min-height:80px;padding:8px;border:1px solid #e5e7eb;border-radius:8px}
        .kvt-card .kvt-notes .row{display:flex;gap:8px;margin-top:6px;flex-wrap:wrap}
        .kvt-card .kvt-notes .row button{padding:8px 10px;border-radius:8px;border:1px solid #e5e7eb;background:#0A212E;color:#fff;cursor:pointer}
        .kvt-card .kvt-notes .row button.kvt-danger{background:#b91c1c}
        .kvt-empty{padding:16px;color:#475569;font-style:italic}
        .kvt-delete{background:none !important;border:none !important;color:#b91c1c !important;font-size:18px;line-height:1;cursor:pointer;padding:0}
        .kvt-delete:hover{color:#7f1d1d !important}
        .kvt-delete.dashicons{vertical-align:middle}
        .kvt-table-wrap{margin-top:16px;overflow:auto;border:1px solid #e5e7eb;border-radius:12px}
        #kvt_table{width:100%;border-collapse:separate;border-spacing:0;table-layout:fixed}
        #kvt_table thead th{position:sticky;top:0;background:#0A212E;color:#fff;padding:10px;border-bottom:1px solid #0A212E;text-align:left}
        #kvt_table td{padding:8px;border-bottom:1px solid #e5e7eb;overflow-wrap:anywhere;word-break:break-word}
        .kvt-modal{position:fixed;inset:0;background:rgba(2,6,23,.5);display:flex;align-items:center;justify-content:center;z-index:9999}
        .kvt-modal-content{background:#fff;max-width:980px;width:95%;border-radius:12px;box-shadow:0 15px 40px rgba(0,0,0,.2)}
        .kvt-modal-header{display:flex;justify-content:space-between;align-items:center;padding:12px 16px;border-bottom:1px solid #e5e7eb}
        .kvt-modal-body{padding:12px 16px}
        .kvt-modal-close{background:none;border:none;cursor:pointer}
        .kvt-modal-controls{display:flex;gap:12px;align-items:center;flex-wrap:wrap;margin-bottom:12px}
        .kvt-modal-controls select,.kvt-modal-controls input{padding:8px 10px;border:1px solid #e5e7eb;border-radius:8px}
        .kvt-modal-list{display:grid;grid-template-columns:repeat(auto-fill,minmax(260px,1fr));gap:10px;max-height:420px;overflow:auto}
        .kvt-card-mini{border:1px solid #e5e7eb;border-radius:10px;padding:10px}
          .kvt-card-mini h4{margin:0 0 6px}
          .kvt-mini-panel{display:none;margin-top:8px;border-top:1px dashed #e2e8f0;padding-top:8px}
          .kvt-mini-actions{display:flex;gap:8px;margin-top:8px}
        .kvt-modal-pager{display:flex;gap:10px;align-items:center;justify-content:flex-end;margin-top:10px}
        ";
        wp_register_style('kvt-style', false);
        wp_enqueue_style('kvt-style');
        wp_add_inline_style('kvt-style', $css);

        if (is_user_logged_in() && current_user_can('edit_posts')) {
            // Register a tiny empty script handle and attach our inlines to it, to avoid theme collisions
            wp_register_script('kvt-app', '', [], null, true);
            wp_enqueue_script('kvt-app');

            // Inline constants BEFORE app
            $statuses = $this->get_statuses();
            $columns  = $this->get_columns();
            wp_add_inline_script('kvt-app', 'const KVT_STATUSES='.wp_json_encode($statuses).';', 'before');
            wp_add_inline_script('kvt-app', 'const KVT_COLUMNS='.wp_json_encode($columns).';',  'before');
            wp_add_inline_script('kvt-app', 'const KVT_AJAX="'.esc_js(admin_url('admin-ajax.php')).'";', 'before');
            wp_add_inline_script('kvt-app', 'const KVT_NONCE="'.esc_js(wp_create_nonce('kvt_nonce')).'";', 'before');

            // App JS
            $js = <<<'JS'
document.addEventListener('DOMContentLoaded', function(){
  const el = (sel, root=document)=>root.querySelector(sel);
  const els = (sel, root=document)=>Array.from(root.querySelectorAll(sel));
  const esc = (s)=>String(s||'').replace(/[&<>"']/g, m=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;' }[m]));
  const escAttr = esc;

  const board = el('#kvt_board');
  if (!board) return;

  const tableWrap = el('#kvt_table_wrap');
  const tHead = el('#kvt_table_head');
  const tBody = el('#kvt_table_body');

  const selClient  = el('#kvt_client');
  const selProcess = el('#kvt_process');
  const inpSearch  = el('#kvt_search');
  const btnRefresh = el('#kvt_refresh');
  const btnToggle  = el('#kvt_toggle_table');
    const btnCSV     = el('#kvt_export_csv');
    const btnXLS     = el('#kvt_export_xls');
    const btnAdd     = el('#kvt_add_profile');
    const btnNew     = el('#kvt_new_btn');
    const newMenu    = el('#kvt_new_menu');
    const btnAllCSV  = el('#kvt_export_all_csv');
    const btnAllXLS  = el('#kvt_export_all_xls');
    const exportAllForm   = el('#kvt_export_all_form');
    const exportAllFormat = el('#kvt_export_all_format');
    const selInfo    = el('#kvt_selected_info');
    const selSummary = el('#kvt_selected_summary');
    const selToggle  = el('#kvt_selected_toggle');
    const selDetails = el('#kvt_selected_details');
    const selClientInfo = el('#kvt_selected_client');
    const selProcessInfo = el('#kvt_selected_process');

  const modal      = el('#kvt_modal');
  const modalClose = el('.kvt-modal-close', modal);
  const modalList  = el('#kvt_modal_list', modal);
  const modalCli   = el('#kvt_modal_client', modal);
  const modalProc  = el('#kvt_modal_process', modal);
  const modalPrev  = el('#kvt_modal_prev', modal);
  const modalNext  = el('#kvt_modal_next', modal);
  const modalPage  = el('#kvt_modal_pageinfo', modal);
  const modalCreate= el('#kvt_modal_create_empty', modal);
  const modalSearch= el('#kvt_modal_search', modal);

  let currentPage = 1;

  function openModal(){
    modal.style.display = 'flex';
    if (selClient && selClient.value) modalCli.value = selClient.value;
    filterModalProcessOptions();
    if (selProcess && selProcess.value) modalProc.value = selProcess.value;
    modalSearch.value = '';
    listProfiles(1);
  }
  function closeModal(){ modal.style.display = 'none'; }
  modalClose && modalClose.addEventListener('click', closeModal);
  modal && modal.addEventListener('click', (e)=>{ if(e.target===modal) closeModal(); });

  function filterProcessOptions(){
    const clientId = parseInt(selClient.value || '0', 10);
    const current = selProcess.value;
    selProcess.innerHTML = '<option value="">— Todos —</option>';
    (window.KVT_PROCESS_MAP||[]).forEach(p=>{
      if (!clientId || p.client_id === clientId) {
        const opt = document.createElement('option');
        opt.value = String(p.id);
        opt.textContent = p.name;
        selProcess.appendChild(opt);
      }
    });
    if (current && Array.from(selProcess.options).some(o=>o.value===current)) selProcess.value = current;
  }
  function filterModalProcessOptions(){
    const clientId = parseInt(modalCli.value || '0', 10);
    const current = modalProc.value;
    modalProc.innerHTML = '<option value="">— Ninguno —</option>';
    (window.KVT_PROCESS_MAP||[]).forEach(p=>{
      if (!clientId || p.client_id === clientId) {
        const opt = document.createElement('option');
        opt.value = String(p.id);
        opt.textContent = p.name;
        modalProc.appendChild(opt);
      }
    });
    if (current && Array.from(modalProc.options).some(o=>o.value===current)) modalProc.value = current;
  }
  modalCli && modalCli.addEventListener('change', filterModalProcessOptions);

  function renderBoardSkeleton(){
    board.innerHTML = '';
    KVT_STATUSES.forEach(st=>{
      const col = document.createElement('div');
      col.className = 'kvt-col'; col.dataset.status = st;
      const h = document.createElement('h3'); h.textContent = st;
      const zone = document.createElement('div'); zone.className = 'kvt-dropzone'; zone.dataset.status = st;
      col.appendChild(h); col.appendChild(zone);
      board.appendChild(col);
    });
  }

  function ajaxForm(params){
    const body = new URLSearchParams(params);
    return fetch(KVT_AJAX, { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body:body.toString() }).then(r=>r.json());
  }

  function lastNoteSnippet(notes){
    const txt = String(notes||'').trim();
    if (!txt) return '';
    const lines = txt.split(/\r?\n/).map(l=>l.trim()).filter(Boolean);
    if (!lines.length) return '';
    const last = lines[lines.length-1];
    const words = last.split(/\s+/);
    const slice = words.slice(0,30).join(' ');
    return slice + (words.length>30 ? '…' : '');
  }

    function cardTemplate(c){
      const card = document.createElement('div');
      card.className = 'kvt-card'; card.setAttribute('draggable','true'); card.dataset.id = c.id;

      const head = document.createElement('div'); head.className='kvt-card-head';
      const title = document.createElement('p'); title.className = 'kvt-title';
      title.textContent = (c.meta.first_name||'') + ' ' + (c.meta.last_name||'');
      if (title.textContent.trim()==='') title.textContent = c.title;
      head.appendChild(title);
      if (c.meta.cv_url){
        const cv = document.createElement('a');
        cv.href = c.meta.cv_url; cv.target='_blank';
        cv.className = 'kvt-cv-link dashicons dashicons-media-document';
        cv.setAttribute('title','Ver CV');
        head.appendChild(cv);
      }

      const sub = document.createElement('p'); sub.className = 'kvt-sub';
      sub.textContent = lastNoteSnippet(c.meta.notes);

    const expand = document.createElement('div'); expand.className='kvt-expand';
    const btn = document.createElement('button'); btn.type='button'; btn.textContent='Ver perfil';
    const btnDel = document.createElement('button'); btnDel.type='button'; btnDel.className='kvt-delete dashicons dashicons-trash'; btnDel.setAttribute('title','Eliminar candidato');
    expand.appendChild(btn); expand.appendChild(btnDel);

    const panel = document.createElement('div'); panel.className='kvt-panel';
    panel.innerHTML = buildProfileHTML(c);

    btn.addEventListener('click', ()=>{
      const visible = panel.style.display === 'block';
      panel.style.display = visible ? 'none' : 'block';
      btn.textContent = visible ? 'Ver perfil' : 'Ocultar perfil';
    });

    card.addEventListener('dragstart', e=>{
      card.classList.add('dragging'); e.dataTransfer.setData('text/plain', String(c.id));
    });
    card.addEventListener('dragend', ()=> card.classList.remove('dragging'));

    btnDel.addEventListener('click', ()=>{
      if (!confirm('¿Quitar a este candidato del proceso/cliente actual?')) return;
      ajaxForm({
        action:'kvt_unassign_candidate',
        _ajax_nonce:KVT_NONCE,
        id:String(c.id),
        client_id: selClient ? selClient.value || '' : '',
        process_id: selProcess ? selProcess.value || '' : ''
      })
        .then(j=>{
          if (!j.success) return alert(j.data && j.data.msg ? j.data.msg : 'No se pudo eliminar.');
          card.remove();
        });
    });

      card.appendChild(head); card.appendChild(sub);
    card.appendChild(expand); card.appendChild(panel);

    // Enable handlers after elements are in the DOM
    enableNotesHandlers(card, String(c.id));
    enableProfileEditHandlers(card, String(c.id));
    enableCvUploadHandlers(card, String(c.id));
    return card;
  }

  function buildProfileHTML(c){
    const m = c.meta||{};
    const input = (val,type='text',ph='')=>'<input class="kvt-input" type="'+type+'" value="'+esc(val||'')+'" placeholder="'+esc(ph||'')+'">';
    const kvInp = (label, html)=>'<dt>'+esc(label)+'</dt><dd>'+html+'</dd>';

    const dl =
      kvInp('Nombre',       input((m.first_name||''))) +
      kvInp('Apellidos',    input((m.last_name||''))) +
      kvInp('Email',        input((m.email||''), 'email')) +
      kvInp('Teléfono',     input((m.phone||''))) +
      kvInp('País',         input((m.country||''))) +
      kvInp('Ciudad',       input((m.city||''))) +
      kvInp('CV (URL)',     input((m.cv_url||''), 'url', 'https://...')) +
      kvInp('Subir CV',     '<input class=\"kvt-input kvt-cv-file\" type=\"file\" accept=\".pdf,.doc,.docx,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\">'+
                            '<button type=\"button\" class=\"kvt-upload-cv\" style=\"margin-top:6px\">Subir y guardar</button>') +
      kvInp('Fecha subida', input((m.cv_uploaded||''), 'text', 'DD-MM-YYYY'));

    const notesVal = m.notes || '';
    const notes =
      '<div class="kvt-notes">'+
        '<label><strong>Notas</strong></label>'+
        '<textarea class="kvt-notes-text">'+esc(notesVal)+'</textarea>'+
        '<div class="row">'+
          '<button type="button" class="kvt-save-notes">Guardar notas</button>'+
          '<button type="button" class="kvt-delete-notes kvt-danger">Borrar notas</button>'+
          '<button type="button" class="kvt-save-profile">Guardar perfil</button>'+
        '</div>'+
      '</div>';

    return '<dl>'+dl+'</dl>'+notes;
  }

  function enableNotesHandlers(card, id){
    const txt = card.querySelector('.kvt-notes-text');
    const btnSave = card.querySelector('.kvt-save-notes');
    const btnDel  = card.querySelector('.kvt-delete-notes');

    btnSave && btnSave.addEventListener('click', ()=>{
      const notes = txt ? txt.value : '';
      ajaxForm({action:'kvt_update_notes', _ajax_nonce:KVT_NONCE, id:id, notes:notes})
        .then(j=>{
          if (!j.success) return alert('No se pudo guardar.');
          const sub = card.querySelector('.kvt-sub');
          if (sub) sub.textContent = notes ? lastNoteSnippet(notes) : '';
          alert('Notas guardadas.');
        });
    });
    btnDel && btnDel.addEventListener('click', ()=>{
      if (!confirm('¿Seguro que deseas borrar todas las notas?')) return;
      ajaxForm({action:'kvt_delete_notes', _ajax_nonce:KVT_NONCE, id:id})
        .then(j=>{
          if (!j.success) return alert('No se pudo borrar.');
          if (txt) txt.value = '';
          const sub = card.querySelector('.kvt-sub'); if (sub) sub.textContent = '';
          alert('Notas borradas.');
        });
    });
  }

  function enableProfileEditHandlers(card, id){
    const inputs = card.querySelectorAll('dl .kvt-input');
    const btnSaveProfile = card.querySelector('.kvt-save-profile');
    if (!btnSaveProfile) return;

    btnSaveProfile.addEventListener('click', ()=>{
      const vals = Array.from(inputs).map(i=>i.value || '');
      const payload = {
        first_name: vals[0] || '',
        last_name:  vals[1] || '',
        email:      vals[2] || '',
        phone:      vals[3] || '',
        country:    vals[4] || '',
        city:       vals[5] || '',
        cv_url:     vals[6] || '',
        cv_uploaded:vals[8] || '',
      };
      fetch(KVT_AJAX, {method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body:new URLSearchParams({action:'kvt_update_profile', _ajax_nonce:KVT_NONCE, id, ...payload}).toString()})
        .then(r=>r.json()).then(j=>{
          if(!j.success) return alert(j.data && j.data.msg ? j.data.msg : 'No se pudo guardar el perfil.');
          const title = card.querySelector('.kvt-title');
          if (title) title.textContent = (payload.first_name+' '+payload.last_name).trim() || title.textContent;
          alert('Perfil guardado.');
        });
    });
  }

  function enableCvUploadHandlers(card, id){
    const fileInput = card.querySelector('.kvt-cv-file');
    const urlInput  = card.querySelector('dl .kvt-input[type="url"]');
    const dateInput = card.querySelectorAll('dl .kvt-input')[8];
    const btnUpload = card.querySelector('.kvt-upload-cv');
    if (!fileInput || !btnUpload) return;
    btnUpload.addEventListener('click', ()=>{
      if (!fileInput.files || !fileInput.files[0]) { alert('Selecciona un archivo.'); return; }
      const fd = new FormData();
      fd.append('action','kvt_upload_cv');
      fd.append('_ajax_nonce', KVT_NONCE);
      fd.append('id', id);
      fd.append('file', fileInput.files[0]);
      fetch(KVT_AJAX, { method:'POST', body: fd })
        .then(r=>r.json())
        .then(j=>{
          if(!j.success) return alert(j.data && j.data.msg ? j.data.msg : 'No se pudo subir el CV.');
          if (urlInput) urlInput.value = j.data.url || '';
          if (dateInput) dateInput.value = j.data.date || '';
          alert('CV subido y guardado.');
        });
    });
  }

  function enableDnD(){
    els('.kvt-dropzone').forEach(zone=>{
      zone.addEventListener('dragover', e=>{ e.preventDefault(); });
      zone.addEventListener('drop', e=>{
        e.preventDefault();
        const id = e.dataTransfer.getData('text/plain');
        const newStatus = zone.dataset.status;
        const card = el('.kvt-card[data-id="'+id+'"]');
        if (card) zone.appendChild(card);
        ajaxForm({action:'kvt_update_status', _ajax_nonce:KVT_NONCE, id:id, status:newStatus});
      });
    });
  }

  function fetchCandidates(){
    const params = new URLSearchParams();
    params.set('action','kvt_get_candidates');
    params.set('_ajax_nonce', KVT_NONCE);
    params.set('client', selClient.value);
    params.set('process', selProcess.value);
    params.set('search', inpSearch.value);
    return fetch(KVT_AJAX, { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body:params.toString() }).then(r=>r.json());
  }

  function renderData(data){
    board.innerHTML = '';
    KVT_STATUSES.forEach(st=>{
      const col = document.createElement('div');
      col.className = 'kvt-col'; col.dataset.status = st;
      const h = document.createElement('h3'); h.textContent = st;
      const zone = document.createElement('div'); zone.className = 'kvt-dropzone'; zone.dataset.status = st;
      col.appendChild(h); col.appendChild(zone); board.appendChild(col);
    });

    if (!data || data.length === 0) {
      const empty = document.createElement('div');
      empty.className = 'kvt-empty';
      empty.innerHTML = 'Selecciona un <strong>Cliente</strong> o un <strong>Proceso</strong> para ver candidatos.';
      board.prepend(empty);
    }

    data.forEach(c=>{
      const zone = el('.kvt-dropzone[data-status="'+(c.status||'')+'"]') || el('.kvt-dropzone');
      if (zone) {
        const card = cardTemplate(c);
        zone.appendChild(card);
      }
    });

    enableDnD();

    tHead.innerHTML = KVT_COLUMNS.map(c=>'<th>'+esc(c.label)+'</th>').join('');
    tBody.innerHTML = data.map(row=>{
      const tds = KVT_COLUMNS.map(col=>{
        const val = row.meta[col.key] || '';
        if (col.key==='cv_url') {
          return '<td>'+(val ? '<a href="'+escAttr(val)+'" target="_blank" rel="noopener">Abrir</a>' : '')+'</td>';
        }
        return '<td>'+esc(val)+'</td>';
      }).join('');
      return '<tr>'+tds+'</tr>';
    }).join('');
  }

  function syncExportHidden(){
    el('#kvt_export_client').value  = selClient.value;
    el('#kvt_export_process').value = selProcess.value;
    el('#kvt_export_search').value  = inpSearch.value;
  }

  function updateSelectedInfo(){
    if(!selInfo) return;
    const cid = selClient && selClient.value ? selClient.value : '';
    const pid = selProcess && selProcess.value ? selProcess.value : '';
    if(!cid && !pid){ selInfo.style.display='none'; return; }
    const cname = cid && selClient.options[selClient.selectedIndex] ? selClient.options[selClient.selectedIndex].text : '';
    const pname = pid && selProcess.options[selProcess.selectedIndex] ? selProcess.options[selProcess.selectedIndex].text : '';
    selInfo.style.display='block';
    selSummary.textContent = (cname?('Cliente: '+cname):'') + (pname?((cname?' – ':'')+'Proceso: '+pname):'');
    let clientDet='';
    if(cid && Array.isArray(window.KVT_CLIENT_MAP)){
      const c = window.KVT_CLIENT_MAP.find(x=>String(x.id)===cid);
      if(c){
        clientDet = 'Contacto: '+(c.contact_name||'');
        if(c.contact_email) clientDet += ', '+c.contact_email;
        if(c.contact_phone) clientDet += ', '+c.contact_phone;
      }
      clientDet += ' <a href="'+selInfo.dataset.clientBase+cid+'" target="_blank">Editar</a>';
    }
    selClientInfo.innerHTML = clientDet;
    let procDet='';
    if(pid && Array.isArray(window.KVT_PROCESS_MAP)){
      const p = window.KVT_PROCESS_MAP.find(x=>String(x.id)===pid);
      if(p){ procDet = p.name||''; }
      procDet += ' <a href="'+selInfo.dataset.processBase+pid+'" target="_blank">Editar</a>';
    }
    selProcessInfo.innerHTML = procDet;
  }

  const exportForm = el('#kvt_export_form');
  btnCSV && btnCSV.addEventListener('click', ()=>{ el('#kvt_export_format').value='csv'; syncExportHidden(); exportForm.submit(); });
  btnXLS && btnXLS.addEventListener('click', ()=>{ el('#kvt_export_format').value='xls'; syncExportHidden(); exportForm.submit(); });
  btnAllCSV && btnAllCSV.addEventListener('click', ()=>{ exportAllFormat.value='csv'; exportAllForm && exportAllForm.submit(); });
  btnAllXLS && btnAllXLS.addEventListener('click', ()=>{ exportAllFormat.value='xls'; exportAllForm && exportAllForm.submit(); });

  selToggle && selToggle.addEventListener('click', ()=>{
    selDetails.style.display = selDetails.style.display==='block' ? 'none' : 'block';
  });

  btnToggle && btnToggle.addEventListener('click', ()=>{
    tableWrap.style.display = (tableWrap.style.display==='none' || !tableWrap.style.display) ? 'block' : 'none';
  });

  function refresh(){
    const hasFilter = (selClient && selClient.value) || (selProcess && selProcess.value);
    if (!hasFilter) {
      board.innerHTML = '<div class="kvt-empty">Selecciona un <strong>Cliente</strong> o un <strong>Proceso</strong> para ver candidatos.</div>';
      tHead.innerHTML = ''; tBody.innerHTML = '';
      return;
    }
    fetchCandidates().then(j=>{
      if(j.success){ renderData(j.data); } else { alert('Error cargando candidatos'); }
    });
  }
  btnRefresh && btnRefresh.addEventListener('click', ()=>{ refresh(); updateSelectedInfo(); });
  selClient && selClient.addEventListener('change', ()=>{ filterProcessOptions(); refresh(); updateSelectedInfo(); });
  selProcess && selProcess.addEventListener('change', ()=>{ refresh(); updateSelectedInfo(); });
  let to=null; inpSearch && inpSearch.addEventListener('input', ()=>{ clearTimeout(to); to=setTimeout(refresh,300); });

  updateSelectedInfo();

  // Modal list & clone/create
  function listProfiles(page){
    currentPage = page || 1;
    const params = new URLSearchParams();
    params.set('action','kvt_list_profiles');
    params.set('_ajax_nonce', KVT_NONCE);
    params.set('page', currentPage);
    params.set('q', modalSearch.value || '');
    fetch(KVT_AJAX,{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:params.toString()})
      .then(r=>r.json())
      .then(j=>{
        if(!j.success) return alert('No se pudo cargar la lista.');
        const {items,pages} = j.data;
          modalList.innerHTML = items.map(it=>{
            const m = it.meta||{};
            return '<div class="kvt-card-mini" data-id="'+it.id+'">'+
              '<h4>'+esc((m.first_name||'')+' '+(m.last_name||''))+(m.cv_url?'<a href="'+escAttr(m.cv_url)+'" class="kvt-cv-link dashicons dashicons-media-document" target="_blank" title="Ver CV"></a>':'')+'</h4>'+
              '<p style="margin:.2em 0;color:#64748b">'+esc(m.email||'')+'</p>'+
              '<div class="kvt-mini-actions">'+
                '<button type="button" class="kvt-btn kvt-mini-add" data-id="'+it.id+'">Añadir</button>'+
                '<button type="button" class="kvt-btn kvt-secondary kvt-mini-view" data-id="'+it.id+'">Ver perfil</button>'+
              '</div>'+
              '<div class="kvt-mini-panel">'+buildProfileHTML({meta:it.meta})+'</div>'+
            '</div>';
          }).join('');
          modalPage.textContent = 'Página '+currentPage+' de '+(pages||1);
          if(modalPrev) modalPrev.style.display = pages>1 ? 'inline-block' : 'none';
          if(modalNext) modalNext.style.display = pages>1 ? 'inline-block' : 'none';
          els('.kvt-mini-add', modalList).forEach(b=>{
            b.addEventListener('click', ()=>{
              const id = b.getAttribute('data-id');
              const proc = modalProc.value;
              const cli  = modalCli.value;
              const p = new URLSearchParams();
              p.set('action','kvt_assign_candidate');
              p.set('_ajax_nonce', KVT_NONCE);
              p.set('candidate_id', id);
              p.set('process_id', proc);
              p.set('client_id', cli);
              fetch(KVT_AJAX,{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:p.toString()})
                .then(r=>r.json()).then(j=>{
                  if(!j.success) return alert(j.data && j.data.msg ? j.data.msg : 'No se pudo asignar.');
                  alert('Candidato asignado.');
                  closeModal();
                  refresh();
                });
            });
          });
          els('.kvt-mini-view', modalList).forEach(b=>{
            b.addEventListener('click', ()=>{
              const card = b.closest('.kvt-card-mini');
              const panel = card.querySelector('.kvt-mini-panel');
              const show = panel.style.display==='block';
              panel.style.display = show?'none':'block';
              b.textContent = show?'Ver perfil':'Ocultar';
            });
          });
          items.forEach(it=>{
            const card = modalList.querySelector('.kvt-card-mini[data-id="'+it.id+'"]');
            if(card){
              enableNotesHandlers(card, String(it.id));
              enableProfileEditHandlers(card, String(it.id));
              enableCvUploadHandlers(card, String(it.id));
            }
          });
      });
  }
  modalPrev && modalPrev.addEventListener('click', ()=>{ if(currentPage>1) listProfiles(currentPage-1); });
  modalNext && modalNext.addEventListener('click', ()=>{ listProfiles(currentPage+1); });
  modalCreate && modalCreate.addEventListener('click', ()=>{
    const p = new URLSearchParams();
    p.set('action','kvt_clone_profile');
    p.set('_ajax_nonce', KVT_NONCE);
    p.set('source_id','0');
    p.set('process_id', modalProc.value||'');
    p.set('client_id',  modalCli.value||'');
    fetch(KVT_AJAX,{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:p.toString()})
      .then(r=>r.json()).then(j=>{
        if(!j.success) return alert(j.data && j.data.msg ? j.data.msg : 'No se pudo crear.');
        alert('Perfil vacío creado (#'+j.data.id+').');
        closeModal(); refresh();
      });
  });
  let mto=null;
  modalSearch && modalSearch.addEventListener('input', ()=>{ clearTimeout(mto); mto=setTimeout(()=>listProfiles(1), 300); });
  btnAdd && btnAdd.addEventListener('click', openModal);
  // Create candidate modal
    const cmodal = el('#kvt_create_modal');
  const cclose = el('#kvt_create_close');
  const cfirst = el('#kvt_new_first');
  const clast  = el('#kvt_new_last');
  const cemail = el('#kvt_new_email');
  const ccli   = el('#kvt_new_client');
  const cproc  = el('#kvt_new_process');
  const csubmit= el('#kvt_new_submit');

  function openCModal(){
    if (selClient && selClient.value) ccli.value = selClient.value;
    // Populate process by client if map available
    if (window.KVT_PROCESS_MAP && Array.isArray(window.KVT_PROCESS_MAP)) {
      const cid = parseInt(ccli.value||'0',10);
      cproc.innerHTML = '<option value=\"\">— Proceso —</option>';
      window.KVT_PROCESS_MAP.forEach(p=>{
        if (!cid || p.client_id === cid) {
          const opt = document.createElement('option');
          opt.value = String(p.id); opt.textContent = p.name;
          cproc.appendChild(opt);
        }
      });
    }
    cfirst.value=''; clast.value=''; cemail.value='';
    cmodal.style.display = 'flex';
  }
  function closeCModal(){ cmodal.style.display='none'; }
  cclose && cclose.addEventListener('click', closeCModal);
  cmodal && cmodal.addEventListener('click', (e)=>{ if(e.target===cmodal) closeCModal(); });
  ccli && ccli.addEventListener('change', ()=>{
    if (!window.KVT_PROCESS_MAP || !Array.isArray(window.KVT_PROCESS_MAP)) return;
    const cid = parseInt(ccli.value||'0',10);
    cproc.innerHTML = '<option value=\"\">— Proceso —</option>';
    window.KVT_PROCESS_MAP.forEach(p=>{ if(!cid || p.client_id===cid){ const o=document.createElement('option'); o.value=String(p.id); o.textContent=p.name; cproc.appendChild(o);} });
  });
    csubmit && csubmit.addEventListener('click', ()=>{
    const params = new URLSearchParams();
    params.set('action','kvt_create_candidate');
    params.set('_ajax_nonce', KVT_NONCE);
    params.set('first_name', cfirst.value||'');
    params.set('last_name',  clast.value||'');
    params.set('email',      cemail.value||'');
    params.set('client_id',  ccli.value||'');
    params.set('process_id', cproc.value||'');
    fetch(KVT_AJAX,{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:params.toString()})
      .then(r=>r.json()).then(j=>{
        if(!j.success) return alert(j.data && j.data.msg ? j.data.msg : 'No se pudo crear el candidato.');
        alert('Candidato creado (#'+j.data.id+').');
        closeCModal(); refresh();
      });
    });

    // Create client modal
    const clmodal = el('#kvt_new_client_modal');
    const clclose = el('#kvt_new_client_close');
    const clname  = el('#kvt_client_name');
    const clcont  = el('#kvt_client_contact');
    const clemail = el('#kvt_client_email');
    const clphone = el('#kvt_client_phone');
    const clsubmit= el('#kvt_client_submit');
    function openClModal(){ clname.value=''; clcont.value=''; clemail.value=''; clphone.value=''; clmodal.style.display='flex'; }
    function closeClModal(){ clmodal.style.display='none'; }
    clclose && clclose.addEventListener('click', closeClModal);
    clmodal && clmodal.addEventListener('click', e=>{ if(e.target===clmodal) closeClModal(); });
    clsubmit && clsubmit.addEventListener('click', ()=>{
      const params = new URLSearchParams();
      params.set('action','kvt_create_client');
      params.set('_ajax_nonce', KVT_NONCE);
      params.set('name', clname.value||'');
      params.set('contact_name', clcont.value||'');
      params.set('contact_email', clemail.value||'');
      params.set('contact_phone', clphone.value||'');
      fetch(KVT_AJAX,{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:params.toString()})
        .then(r=>r.json()).then(j=>{
          if(!j.success) return alert(j.data && j.data.msg ? j.data.msg : 'No se pudo crear.');
          alert('Cliente creado (#'+j.data.id+').');
          closeClModal(); location.reload();
        });
    });

    // Create process modal
    const pmodal = el('#kvt_new_process_modal');
    const pclose = el('#kvt_new_process_close');
    const pname  = el('#kvt_process_name_new');
    const pcli   = el('#kvt_process_client_new');
    const psubmit= el('#kvt_process_submit');
    function openPModal(){ pname.value=''; pmodal.style.display='flex'; }
    function closePModal(){ pmodal.style.display='none'; }
    pclose && pclose.addEventListener('click', closePModal);
    pmodal && pmodal.addEventListener('click', e=>{ if(e.target===pmodal) closePModal(); });
    psubmit && psubmit.addEventListener('click', ()=>{
      const params = new URLSearchParams();
      params.set('action','kvt_create_process');
      params.set('_ajax_nonce', KVT_NONCE);
      params.set('name', pname.value||'');
      params.set('client_id', pcli.value||'');
      fetch(KVT_AJAX,{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:params.toString()})
        .then(r=>r.json()).then(j=>{
          if(!j.success) return alert(j.data && j.data.msg ? j.data.msg : 'No se pudo crear.');
          alert('Proceso creado (#'+j.data.id+').');
          closePModal(); location.reload();
        });
    });

    // Nuevo menu actions
    btnNew && btnNew.addEventListener('click', ()=>{ newMenu.style.display = newMenu.style.display==='flex' ? 'none' : 'flex'; });
    document.addEventListener('click', e=>{ if(!btnNew.contains(e.target) && !newMenu.contains(e.target)) newMenu.style.display='none'; });
    els('#kvt_new_menu button').forEach(b=>{
      b.addEventListener('click', e=>{
        e.preventDefault();
        e.stopPropagation();
        const act = b.dataset.action;
        newMenu.style.display='none';
        setTimeout(()=>{
          if(act==='candidate') openCModal();
          if(act==='client') openClModal();
          if(act==='process') openPModal();
        },0);
      });
    });

  // Easier drag & drop: allow drop anywhere in column and highlight
  els('.kvt-col').forEach(col=>{
    col.addEventListener('dragover', e=>{ e.preventDefault(); col.classList.add('dragover'); });
    col.addEventListener('dragleave', ()=>{ col.classList.remove('dragover'); });
    col.addEventListener('drop', e=>{
      e.preventDefault(); col.classList.remove('dragover');
      const id = e.dataTransfer.getData('text/plain');
      const zone = col.querySelector('.kvt-dropzone');
      const newStatus = zone ? zone.dataset.status : col.dataset.status;
      const card = el('.kvt-card[data-id=\"'+id+'\"]');
      if (zone && card) zone.appendChild(card);
      ajaxForm({action:'kvt_update_status', _ajax_nonce:KVT_NONCE, id:id, status:newStatus});
    });
  });

  // Make dropzones taller
  els('.kvt-dropzone').forEach(zone=> zone.style.minHeight = '200px');

  // Safer process filter if map missing
  function safeHasProcessMap(){ return Array.isArray(window.KVT_PROCESS_MAP) && window.KVT_PROCESS_MAP.length>0; }
  const __origFilterProcessOptions = filterProcessOptions;
  filterProcessOptions = function(){
    if (!safeHasProcessMap()) return; // keep server-rendered options
    __origFilterProcessOptions();
  };


  // Init
  renderBoardSkeleton();
  filterProcessOptions();
  refresh();
});
JS;
            wp_add_inline_script('kvt-app', $js, 'after');
        }
    }

    /* Data API */
    public function ajax_get_candidates() {
        check_ajax_referer('kvt_nonce');

        $client_id  = isset($_POST['client'])  ? intval($_POST['client'])  : 0;
        $process_id = isset($_POST['process']) ? intval($_POST['process']) : 0;
        $search     = isset($_POST['search'])  ? trim(sanitize_text_field($_POST['search'])) : '';

        if ($client_id === 0 && $process_id === 0) {
            wp_send_json_success([]);
        }

        $tax_query = [];
        if ($process_id) {
            $tax_query[] = ['taxonomy'=>self::TAX_PROCESS,'field'=>'term_id','terms'=>[$process_id]];
            if ($client_id) $tax_query[] = ['taxonomy'=>self::TAX_CLIENT,'field'=>'term_id','terms'=>[$client_id]];
        } else {
            if ($client_id) {
                $proc_terms = get_terms(['taxonomy'=>self::TAX_PROCESS,'hide_empty'=>false]);
                $proc_ids = [];
                foreach ($proc_terms as $t) {
                    $cid = (int) get_term_meta($t->term_id, 'kvt_process_client', true);
                    if ($cid === $client_id) $proc_ids[] = $t->term_id;
                }
                if (!empty($proc_ids)) {
                    $tax_query = [
                        'relation' => 'OR',
                        ['taxonomy'=>self::TAX_CLIENT, 'field'=>'term_id','terms'=>[$client_id]],
                        ['taxonomy'=>self::TAX_PROCESS,'field'=>'term_id','terms'=>$proc_ids],
                    ];
                } else {
                    $tax_query[] = ['taxonomy'=>self::TAX_CLIENT,'field'=>'term_id','terms'=>[$client_id]];
                }
            }
        }

        $args = [
            'post_type'      => self::CPT,
            'post_status'    => 'any',
            'posts_per_page' => 999, // ilimitado práctico
            'no_found_rows'  => true,
        ];
        if (!empty($tax_query)) $args['tax_query'] = $tax_query;

        if ($search !== '') {
            $args['meta_query'] = [
                'relation' => 'OR',
                ['key'=>'kvt_first_name','value'=>$search,'compare'=>'LIKE'],
                ['key'=>'kvt_last_name', 'value'=>$search,'compare'=>'LIKE'],
                ['key'=>'kvt_email',     'value'=>$search,'compare'=>'LIKE'],
                ['key'=>'first_name','value'=>$search,'compare'=>'LIKE'],
                ['key'=>'last_name', 'value'=>$search,'compare'=>'LIKE'],
                ['key'=>'email',     'value'=>$search,'compare'=>'LIKE'],
            ];
            $args['s'] = $search;
        }

        $q = new WP_Query($args);
        $data = [];
        foreach ($q->posts as $p) {
            $notes_raw = get_post_meta($p->ID,'kvt_notes',true);
            if ($notes_raw === '') $notes_raw = get_post_meta($p->ID,'notes',true);
            $meta = [
                'first_name'  => $this->meta_get_compat($p->ID,'kvt_first_name',['first_name']),
                'last_name'   => $this->meta_get_compat($p->ID,'kvt_last_name',['last_name']),
                'email'       => $this->meta_get_compat($p->ID,'kvt_email',['email']),
                'phone'       => $this->meta_get_compat($p->ID,'kvt_phone',['phone']),
                'country'     => $this->meta_get_compat($p->ID,'kvt_country',['country']),
                'city'        => $this->meta_get_compat($p->ID,'kvt_city',['city']),
                'cv_url'      => $this->meta_get_compat($p->ID,'kvt_cv_url',['cv_url']),
                'cv_uploaded' => $this->fmt_date_ddmmyyyy($this->meta_get_compat($p->ID,'kvt_cv_uploaded',['cv_uploaded'])),
                'notes'       => $notes_raw,
                'notes_count' => $this->count_notes($notes_raw),
            ];
            $data[] = [
                'id'     => $p->ID,
                'title'  => get_the_title($p),
                'status' => get_post_meta($p->ID,'kvt_status',true),
                'meta'   => $meta,
            ];
        }
        wp_send_json_success($data);
    }

    public function ajax_update_status() {
        check_ajax_referer('kvt_nonce');

        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;
        $st = isset($_POST['status']) ? sanitize_text_field($_POST['status']) : '';

        $statuses = $this->get_statuses();
        if (!$id || !in_array($st, $statuses, true)) {
            wp_send_json_error(['msg'=>'Invalid'], 400);
        }
        update_post_meta($id, 'kvt_status', $st);
        wp_send_json_success(['ok'=>true]);
    }

    public function ajax_update_notes() {
        check_ajax_referer('kvt_nonce');
        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;
        $notes = isset($_POST['notes']) ? wp_kses_post($_POST['notes']) : '';
        if (!$id) wp_send_json_error(['msg'=>'Invalid'], 400);
        update_post_meta($id, 'kvt_notes', $notes);
        update_post_meta($id, 'notes', $notes);
        wp_send_json_success(['ok'=>true]);
    }

    public function ajax_delete_notes() {
        check_ajax_referer('kvt_nonce');
        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;
        if (!$id) wp_send_json_error(['msg'=>'Invalid'], 400);
        delete_post_meta($id, 'kvt_notes');
        delete_post_meta($id, 'notes');
        wp_send_json_success(['ok'=>true]);
    }

    public function ajax_delete_candidate() {
        check_ajax_referer('kvt_nonce');
        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;
        if (!$id) wp_send_json_error(['msg'=>'Invalid'], 400);
        $res = wp_trash_post($id);
        if (!$res) wp_send_json_error(['msg'=>'No se pudo mover a la papelera.']);
        wp_send_json_success(['ok'=>true]);
    }

    public function ajax_update_profile() {
        check_ajax_referer('kvt_nonce');

        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;
        if (!$id || get_post_type($id)!==self::CPT) wp_send_json_error(['msg'=>'Invalid'],400);

        $fields = [
            'kvt_first_name' => isset($_POST['first_name']) ? sanitize_text_field($_POST['first_name']) : '',
            'kvt_last_name'  => isset($_POST['last_name'])  ? sanitize_text_field($_POST['last_name'])  : '',
            'kvt_email'      => isset($_POST['email'])      ? sanitize_email($_POST['email'])           : '',
            'kvt_phone'      => isset($_POST['phone'])      ? sanitize_text_field($_POST['phone'])      : '',
            'kvt_country'    => isset($_POST['country'])    ? sanitize_text_field($_POST['country'])    : '',
            'kvt_city'       => isset($_POST['city'])       ? sanitize_text_field($_POST['city'])       : '',
            'kvt_cv_url'     => isset($_POST['cv_url'])     ? esc_url_raw($_POST['cv_url'])             : '',
            'kvt_cv_uploaded'=> isset($_POST['cv_uploaded'])? sanitize_text_field($_POST['cv_uploaded']): '',
        ];
        if ($fields['kvt_cv_uploaded']) $fields['kvt_cv_uploaded'] = $this->fmt_date_ddmmyyyy($fields['kvt_cv_uploaded']);

        foreach ($fields as $k=>$v) {
            update_post_meta($id, $k, $v);
            $legacy = str_replace('kvt_', '', $k);
            update_post_meta($id, $legacy, $v);
        }

        $title = get_the_title($id);
        if (!$title) {
            $fn = $fields['kvt_first_name']; $ln = $fields['kvt_last_name'];
            $new = trim($fn.' '.$ln);
            if ($new) wp_update_post(['ID'=>$id,'post_title'=>$new]);
        }

        wp_send_json_success(['ok'=>true]);
    }

    public function ajax_upload_cv() {
        check_ajax_referer('kvt_nonce');

        $id = isset($_POST['id']) ? intval($_POST['id']) : 0;
        if (!$id || get_post_type($id)!==self::CPT) wp_send_json_error(['msg'=>'Invalid'],400);
        if (empty($_FILES['file']['name'])) wp_send_json_error(['msg'=>'Archivo no recibido'],400);

        if (!function_exists('media_handle_upload')) {
            require_once ABSPATH . 'wp-admin/includes/image.php';
            require_once ABSPATH . 'wp-admin/includes/file.php';
            require_once ABSPATH . 'wp-admin/includes/media.php';
        }
        add_filter('upload_mimes', function($mimes){
            $mimes['pdf']  = 'application/pdf';
            $mimes['doc']  = 'application/msword';
            $mimes['docx'] = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
            return $mimes;
        });

        $attach_id = media_handle_upload('file', $id);
        if (is_wp_error($attach_id)) wp_send_json_error(['msg'=>$attach_id->get_error_message()],500);

        $url = wp_get_attachment_url($attach_id);
        update_post_meta($id, 'kvt_cv_attachment_id', $attach_id);
        update_post_meta($id, 'kvt_cv_url', esc_url_raw($url));
        update_post_meta($id, 'cv_url', esc_url_raw($url));
        $today = date_i18n('d-m-Y');
        update_post_meta($id, 'kvt_cv_uploaded', $today);
        update_post_meta($id, 'cv_uploaded', $today);

        wp_send_json_success(['url'=>$url,'date'=>$today]);
    }

    public function ajax_list_profiles() {
        check_ajax_referer('kvt_nonce');

        $page   = isset($_POST['page']) ? max(1, intval($_POST['page'])) : 1;
        $search = isset($_POST['q']) ? sanitize_text_field(trim($_POST['q'])) : '';

        // Return all candidates so modal shows complete list
        $args = [
            'post_type'      => self::CPT,
            'post_status'    => 'any',
            'posts_per_page' => -1,
            'paged'          => $page,
        ];
        if ($search !== '') {
            $args['meta_query'] = [
                'relation' => 'OR',
                ['key'=>'kvt_first_name','value'=>$search,'compare'=>'LIKE'],
                ['key'=>'kvt_last_name', 'value'=>$search,'compare'=>'LIKE'],
                ['key'=>'kvt_email',     'value'=>$search,'compare'=>'LIKE'],
                ['key'=>'first_name','value'=>$search,'compare'=>'LIKE'],
                ['key'=>'last_name', 'value'=>$search,'compare'=>'LIKE'],
                ['key'=>'email',     'value'=>$search,'compare'=>'LIKE'],
            ];
            $args['s'] = $search;
        }

        $q = new WP_Query($args);
        $items = [];
        foreach ($q->posts as $p) {
            $notes_raw = get_post_meta($p->ID,'kvt_notes',true);
            if ($notes_raw === '') $notes_raw = get_post_meta($p->ID,'notes',true);
            $items[] = [
                'id'   => $p->ID,
                'meta' => [
                    'first_name'  => $this->meta_get_compat($p->ID,'kvt_first_name',['first_name']),
                    'last_name'   => $this->meta_get_compat($p->ID,'kvt_last_name',['last_name']),
                    'email'       => $this->meta_get_compat($p->ID,'kvt_email',['email']),
                    'phone'       => $this->meta_get_compat($p->ID,'kvt_phone',['phone']),
                    'country'     => $this->meta_get_compat($p->ID,'kvt_country',['country']),
                    'city'        => $this->meta_get_compat($p->ID,'kvt_city',['city']),
                    'cv_url'      => $this->meta_get_compat($p->ID,'kvt_cv_url',['cv_url']),
                    'cv_uploaded' => $this->fmt_date_ddmmyyyy($this->meta_get_compat($p->ID,'kvt_cv_uploaded',['cv_uploaded'])),
                    'notes'       => $notes_raw,
                    'notes_count' => $this->count_notes($notes_raw),
                ],
            ];
        }
        wp_send_json_success(['items'=>$items,'pages'=>$q->max_num_pages]);
    }

    public function ajax_clone_profile() {
        check_ajax_referer('kvt_nonce');

        $source_id  = isset($_POST['source_id']) ? intval($_POST['source_id']) : 0;
        $process_id = isset($_POST['process_id']) ? intval($_POST['process_id']) : 0;
        $client_id  = isset($_POST['client_id']) ? intval($_POST['client_id']) : 0;

        $title = '';
        $meta  = [];
        if ($source_id) {
            if (get_post_type($source_id) !== self::CPT) {
                wp_send_json_error(['msg'=>'Invalid source'],400);
            }
            $title = get_the_title($source_id);
            $all_meta = get_post_meta($source_id);
            foreach ($all_meta as $k => $vals) {
                $meta[$k] = maybe_unserialize($vals[0]);
            }
        }

        $new_id = wp_insert_post([
            'post_type'   => self::CPT,
            'post_status' => 'publish',
            'post_title'  => $title,
        ]);
        if (!$new_id || is_wp_error($new_id)) {
            wp_send_json_error(['msg'=>'No se pudo crear.'],500);
        }

        foreach ($meta as $k => $v) {
            update_post_meta($new_id, $k, $v);
        }
        if (!isset($meta['kvt_status'])) {
            $statuses = $this->get_statuses();
            if (!empty($statuses)) update_post_meta($new_id,'kvt_status',$statuses[0]);
        }
        if ($client_id) wp_set_object_terms($new_id, [$client_id], self::TAX_CLIENT, false);
        if ($process_id) wp_set_object_terms($new_id, [$process_id], self::TAX_PROCESS, false);

        $title = get_the_title($new_id);
        if (!$title) {
            $fn = get_post_meta($new_id,'kvt_first_name',true);
            $ln = get_post_meta($new_id,'kvt_last_name',true);
            $new = trim($fn.' '.$ln);
            if ($new) wp_update_post(['ID'=>$new_id,'post_title'=>$new]);
        }

        wp_send_json_success(['id'=>$new_id]);
    }

    public function ajax_create_candidate() {
        check_ajax_referer('kvt_nonce');

        $first      = isset($_POST['first_name']) ? sanitize_text_field($_POST['first_name']) : '';
        $last       = isset($_POST['last_name'])  ? sanitize_text_field($_POST['last_name'])  : '';
        $email      = isset($_POST['email'])      ? sanitize_email($_POST['email'])           : '';
        $client_id  = isset($_POST['client_id'])  ? intval($_POST['client_id'])               : 0;
        $process_id = isset($_POST['process_id']) ? intval($_POST['process_id'])              : 0;

        $title = trim($first.' '.$last);
        if (!$title) $title = $email;

        $new_id = wp_insert_post([
            'post_type'   => self::CPT,
            'post_status' => 'publish',
            'post_title'  => $title ?: 'Candidate',
        ]);
        if (!$new_id || is_wp_error($new_id)) {
            wp_send_json_error(['msg'=>'No se pudo crear el candidato.'],500);
        }

        $fields = [
            'kvt_first_name' => $first,
            'kvt_last_name'  => $last,
            'kvt_email'      => $email,
        ];
        foreach ($fields as $k => $v) {
            update_post_meta($new_id, $k, $v);
            update_post_meta($new_id, str_replace('kvt_','',$k), $v);
        }
        $statuses = $this->get_statuses();
        if (!empty($statuses)) update_post_meta($new_id,'kvt_status',$statuses[0]);
        if ($client_id) wp_set_object_terms($new_id, [$client_id], self::TAX_CLIENT, false);
        if ($process_id) wp_set_object_terms($new_id, [$process_id], self::TAX_PROCESS, false);

      wp_send_json_success(['id'=>$new_id]);
      }

      public function ajax_create_client() {
          check_ajax_referer('kvt_nonce');

          $name  = isset($_POST['name']) ? sanitize_text_field($_POST['name']) : '';
          $cname = isset($_POST['contact_name'])  ? sanitize_text_field($_POST['contact_name'])  : '';
          $cemail= isset($_POST['contact_email']) ? sanitize_email($_POST['contact_email'])      : '';
          $cphone= isset($_POST['contact_phone']) ? sanitize_text_field($_POST['contact_phone']) : '';

          if ($name === '') wp_send_json_error(['msg'=>'Nombre requerido'],400);

          $term = wp_insert_term($name, self::TAX_CLIENT);
          if (is_wp_error($term)) wp_send_json_error(['msg'=>$term->get_error_message()],500);
          $tid = (int) $term['term_id'];
          update_term_meta($tid, 'contact_name', $cname);
          update_term_meta($tid, 'contact_email', $cemail);
          update_term_meta($tid, 'contact_phone', $cphone);

          wp_send_json_success(['id'=>$tid]);
      }

      public function ajax_create_process() {
          check_ajax_referer('kvt_nonce');

          $name = isset($_POST['name']) ? sanitize_text_field($_POST['name']) : '';
          $client_id = isset($_POST['client_id']) ? intval($_POST['client_id']) : 0;
          if ($name === '') wp_send_json_error(['msg'=>'Nombre requerido'],400);

          $term = wp_insert_term($name, self::TAX_PROCESS);
          if (is_wp_error($term)) wp_send_json_error(['msg'=>$term->get_error_message()],500);
          $tid = (int) $term['term_id'];
          if ($client_id) update_term_meta($tid, 'kvt_process_client', $client_id);

          wp_send_json_success(['id'=>$tid]);
      }

      public function ajax_assign_candidate() {
          check_ajax_referer('kvt_nonce');

          $id        = isset($_POST['candidate_id']) ? intval($_POST['candidate_id']) : 0;
          $client_id = isset($_POST['client_id']) ? intval($_POST['client_id']) : 0;
          $process_id= isset($_POST['process_id']) ? intval($_POST['process_id']) : 0;

          if (!$id || get_post_type($id) !== self::CPT) {
              wp_send_json_error(['msg'=>'Invalid candidate'],400);
          }
          if ($process_id && has_term($process_id, self::TAX_PROCESS, $id)) {
              wp_send_json_error(['msg'=>'Ya asignado'],400);
          }
          if ($client_id) wp_set_object_terms($id, [$client_id], self::TAX_CLIENT, true);
          if ($process_id) wp_set_object_terms($id, [$process_id], self::TAX_PROCESS, true);

          wp_send_json_success(['id'=>$id]);
      }

      public function ajax_unassign_candidate() {
          check_ajax_referer('kvt_nonce');

          $id        = isset($_POST['id']) ? intval($_POST['id']) : 0;
          $client_id = isset($_POST['client_id']) ? intval($_POST['client_id']) : 0;
          $process_id= isset($_POST['process_id']) ? intval($_POST['process_id']) : 0;

          if (!$id || get_post_type($id) !== self::CPT) {
              wp_send_json_error(['msg'=>'Invalid candidate'],400);
          }
          if ($client_id) wp_remove_object_terms($id, [$client_id], self::TAX_CLIENT);
          if ($process_id) wp_remove_object_terms($id, [$process_id], self::TAX_PROCESS);

          wp_send_json_success(['id'=>$id]);
      }

      /* Export */
      public function handle_export() {
        if (!is_user_logged_in() || !current_user_can('edit_posts')) wp_die('Unauthorized');
        check_admin_referer('kvt_export','kvt_export_nonce');

        $format     = isset($_POST['format']) ? sanitize_text_field($_POST['format']) : 'csv';
        $client_id  = isset($_POST['filter_client'])  ? intval($_POST['filter_client'])  : 0;
        $process_id = isset($_POST['filter_process']) ? intval($_POST['filter_process']) : 0;
        $search     = isset($_POST['filter_search'])  ? sanitize_text_field($_POST['filter_search']) : '';

        $tax_query = [];
        if ($process_id) {
            $tax_query[] = ['taxonomy'=>self::TAX_PROCESS,'field'=>'term_id','terms'=>[$process_id]];
            if ($client_id) $tax_query[] = ['taxonomy'=>self::TAX_CLIENT,'field'=>'term_id','terms'=>[$client_id]];
        } else {
            if ($client_id) {
                $proc_terms = get_terms(['taxonomy'=>self::TAX_PROCESS,'hide_empty'=>false]);
                $proc_ids = [];
                foreach ($proc_terms as $t) {
                    $cid = (int) get_term_meta($t->term_id, 'kvt_process_client', true);
                    if ($cid === $client_id) $proc_ids[] = $t->term_id;
                }
                if (!empty($proc_ids)) {
                    $tax_query = [
                        'relation' => 'OR',
                        ['taxonomy'=>self::TAX_CLIENT, 'field'=>'term_id','terms'=>[$client_id]],
                        ['taxonomy'=>self::TAX_PROCESS,'field'=>'term_id','terms'=>$proc_ids],
                    ];
                } else {
                    $tax_query[] = ['taxonomy'=>self::TAX_CLIENT,'field'=>'term_id','terms'=>[$client_id]];
                }
            }
        }

        $args = [
            'post_type'      => self::CPT,
            'post_status'    => 'any',
            'posts_per_page' => -1,
            's'              => $search,
        ];
        if (!empty($tax_query)) $args['tax_query'] = $tax_query;

        $q = new WP_Query($args);

        // Fixed order export
        $headers = ['email','first_name','surname','country','city','proceso','cliente','phone','cv_url'];
        $filename = 'pipeline_export_' . date('Ymd_His');

        if ($format === 'xls') {
            header('Content-Type: application/vnd.ms-excel; charset=UTF-8');
            header('Content-Disposition: attachment; filename="'.$filename.'.xls"');
        } else {
            header('Content-Type: text/csv; charset=UTF-8');
            header('Content-Disposition: attachment; filename="'.$filename.'.csv"');
        }
        header('Pragma: no-cache'); header('Expires: 0');

        $out = fopen('php://output', 'w');
        fwrite($out, "\xEF\xBB\xBF");
        fputcsv($out, $headers);

        foreach ($q->posts as $p) {
            $email   = $this->meta_get_compat($p->ID,'kvt_email',['email']);
            $fname   = $this->meta_get_compat($p->ID,'kvt_first_name',['first_name']);
            $lname   = $this->meta_get_compat($p->ID,'kvt_last_name',['last_name']);
            $country = $this->meta_get_compat($p->ID,'kvt_country',['country']);
            $city    = $this->meta_get_compat($p->ID,'kvt_city',['city']);
            $proc    = $this->get_term_name($p->ID, self::TAX_PROCESS);
            $client  = $this->get_term_name($p->ID, self::TAX_CLIENT);
            $phone   = $this->meta_get_compat($p->ID,'kvt_phone',['phone']);
            $cv      = $this->meta_get_compat($p->ID,'kvt_cv_url',['cv_url']);
            fputcsv($out, [$email,$fname,$lname,$country,$city,$proc,$client,$phone,$cv]);
        }
        fclose($out);
        exit;
    }
}

new Kovacic_Pipeline_Visualizer();
